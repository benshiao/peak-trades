{"ast":null,"code":"var _jsxFileName = \"/Users/JohnD/Desktop/tradingview/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer'; // AlphaVantage API Key = CQ5JZQYM4DG0OODA\n// Initial state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  backtests: [],\n  // Backtest list\n  symbol_list: [],\n  // user input search results (1 API call)\n  graphData_AV_API: {},\n  // graphs historical stock data (1 API call)\n  current_symbol: '',\n  // current stock symbol being graphed\n  current_company: '',\n  // current stock company name being graphed\n  graph_type: '',\n  // tracks graph type for graphSection.js to know to add proper amount of candles to chart\n  cache_TSDA: {},\n  // cache AV_API for time series daily adjusted until user changes stock view(prevents unnecssary API calls)\n  cache_TS15min: {},\n  // cache AV_API for time series 15 min until user changes stock view(prevents unnecssary API calls)\n  cache_TS60min: {} // cache AV_API for time series 60 min until user changes stock view(prevents unnecssary API calls)\n\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Provider component\n\nexport const GlobalProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n\n  function deleteBacktest(id) {\n    dispatch({\n      type: 'DELETE_BACKTEST',\n      payload: id\n    });\n  }\n\n  function addBacktest(backtest) {\n    dispatch({\n      type: 'ADD_BACKTEST',\n      payload: backtest\n    });\n  }\n\n  async function cache_TSDA_function(data) {\n    // If API limit: Alerts API limit reached, maintains current payload(stock data)\n    // Else: update current payload\n    if (data.Note) {\n      alert(\"MAX API CALLS. Please wait a minute for more. PeakTrades was built using Alpha Vantage's free API where the call frequency is 5 calls per minute.\");\n      dispatch({\n        type: 'MAX_API',\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: 'FILL_CACHE_TSDA',\n        payload: data\n      });\n    }\n  } // User clicks outside search results\n\n\n  async function clearSearch(searchInputClear) {\n    dispatch({\n      type: 'STOCK_SEARCH',\n      payload: []\n    });\n  } // Updates search results from API when user searches for a stock\n\n\n  async function stockSearch(searchInput) {\n    //API call for searching stock tickers\n    let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n    let data = await response.json(); //create temp list\n\n    let new_symbol_list = []; // If API limit: alerts, maintains current results(if any)\n    // Else: updates search results display properly\n\n    if (data.Note) {\n      alert(\"MAX API CALLS. Please wait a minute for more. However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\"); // Maintains current search results\n\n      dispatch({\n        type: 'MAX_API',\n        payload: new_symbol_list\n      });\n    } else {\n      //iterate over all search results\n      Object.keys(data.bestMatches).forEach(e => {\n        //filter non-US stocks, then add\n        if (data.bestMatches[e][\"4. region\"] === \"United States\") {\n          let new_symbol = {\n            symbol: data.bestMatches[e][\"1. symbol\"],\n            name: data.bestMatches[e][\"2. name\"]\n          };\n          new_symbol_list = [new_symbol, ...new_symbol_list];\n        }\n      });\n      new_symbol_list.reverse(); //update state of web app (official symbol_list)\n\n      dispatch({\n        type: 'STOCK_SEARCH',\n        payload: new_symbol_list\n      });\n    }\n  } // Graphs API data based on user selected stock symbol\n\n\n  async function graphSymbol(selectedSymbol, selectedCompany, graphType, doClearCache) {\n    // Clear cache for new symbol search\n    if (doClearCache) {\n      state.cache_TSDA = {};\n      state.cache_TS15min = {};\n      state.cache_TS60min = {};\n    } // Specific API call parameters\n\n\n    let function_API;\n    let outputSize;\n    let interval_API = '';\n    let cache_exists = false;\n    let data;\n    let response;\n\n    switch (graphType) {\n      case 'day':\n        if (state.cache_TS15min['Time Series (15min)']) {\n          cache_exists = true;\n          data = state.cache_TS15min;\n        } else {\n          function_API = 'TIME_SERIES_INTRADAY';\n          interval_API = '&interval=15min';\n          outputSize = 'compact';\n        }\n\n        break;\n\n      case 'week':\n        if (state.cache_TS60min['Time Series (60min)']) {\n          cache_exists = true;\n          data = state.cache_TS60min;\n        } else {\n          function_API = 'TIME_SERIES_INTRADAY';\n          interval_API = '&interval=60min';\n          outputSize = 'compact';\n        }\n\n        break;\n\n      default:\n        if (state.cache_TSDA['Time Series (Daily)']) {\n          cache_exists = true;\n          data = state.cache_TSDA;\n        } else {\n          function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n          outputSize = 'full';\n        }\n\n    }\n\n    if (!cache_exists) {\n      response = await fetch(`https://www.alphavantage.co/query?function=${function_API}&symbol=${selectedSymbol}${interval_API}&outputsize=${outputSize}&apikey=CQ5JZQYM4DG0OODA`);\n      data = await response.json();\n    } // If API limit: Alerts API limit reached, maintains current payload(stock data)\n    // Else: update current payload\n\n\n    if (data.Note) {\n      alert(\"MAX API CALLS. Please wait a minute for more. However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n      dispatch({\n        type: 'MAX_API',\n        payload: [graphType, data]\n      });\n    } else if (data['Error Message']) {\n      alert(\"ERROR. This stock does not have valid data in the Alpha Vantage database.\");\n      dispatch({\n        type: 'MAX_API',\n        payload: [graphType, data]\n      });\n    } else {\n      dispatch({\n        type: 'DISPLAY_GRAPHS',\n        payload: [graphType, data, selectedCompany]\n      });\n    } // Scroll to top, makes sure user sees graph\n\n\n    window.scrollTo(0, 0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      backtests: state.backtests,\n      symbol_list: state.symbol_list,\n      graphData_AV_API: state.graphData_AV_API,\n      current_symbol: state.current_symbol,\n      current_company: state.current_company,\n      cache_TSDA: state.cache_TSDA,\n      cache_TS15min: state.cache_TS15min,\n      cache_TS60min: state.cache_TS60min,\n      graph_type: state.graph_type,\n      deleteBacktest,\n      addBacktest,\n      clearSearch,\n      stockSearch,\n      graphSymbol,\n      cache_TSDA_function\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 13\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","createContext","useReducer","AppReducer","initialState","backtests","symbol_list","graphData_AV_API","current_symbol","current_company","graph_type","cache_TSDA","cache_TS15min","cache_TS60min","GlobalContext","GlobalProvider","children","state","dispatch","deleteBacktest","id","type","payload","addBacktest","backtest","cache_TSDA_function","data","Note","alert","clearSearch","searchInputClear","stockSearch","searchInput","response","fetch","text","json","new_symbol_list","Object","keys","bestMatches","forEach","e","new_symbol","symbol","name","reverse","graphSymbol","selectedSymbol","selectedCompany","graphType","doClearCache","function_API","outputSize","interval_API","cache_exists","window","scrollTo"],"sources":["/Users/JohnD/Desktop/tradingview/src/context/GlobalState.js"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// AlphaVantage API Key = CQ5JZQYM4DG0OODA\n\n// Initial state\nconst initialState = {\n    backtests: [],     // Backtest list\n    symbol_list: [],      // user input search results (1 API call)\n    graphData_AV_API: {}, // graphs historical stock data (1 API call)\n    current_symbol: '',   // current stock symbol being graphed\n    current_company: '',  // current stock company name being graphed\n    graph_type: '',       // tracks graph type for graphSection.js to know to add proper amount of candles to chart\n    cache_TSDA: {},        // cache AV_API for time series daily adjusted until user changes stock view(prevents unnecssary API calls)\n    cache_TS15min: {},        // cache AV_API for time series 15 min until user changes stock view(prevents unnecssary API calls)\n    cache_TS60min: {}        // cache AV_API for time series 60 min until user changes stock view(prevents unnecssary API calls)\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions\n    function deleteBacktest(id) {\n        dispatch({\n            type: 'DELETE_BACKTEST',\n            payload: id\n        });\n    }\n\n    function addBacktest(backtest) {\n        dispatch({\n            type: 'ADD_BACKTEST',\n            payload: backtest\n        });\n    }\n\n    async function cache_TSDA_function(data) {\n        // If API limit: Alerts API limit reached, maintains current payload(stock data)\n        // Else: update current payload\n        if(data.Note){\n            alert(\"MAX API CALLS. Please wait a minute for more. PeakTrades was built using Alpha Vantage's free API where the call frequency is 5 calls per minute.\");\n            dispatch({\n                type: 'MAX_API',\n                payload: data\n            });\n        }else{\n            dispatch({\n                type: 'FILL_CACHE_TSDA',\n                payload: data\n            });\n        }\n    }\n\n    // User clicks outside search results\n    async function clearSearch(searchInputClear) {\n        dispatch({\n            type: 'STOCK_SEARCH',\n            payload: []\n        });\n    }\n\n    // Updates search results from API when user searches for a stock\n    async function stockSearch(searchInput) {\n        //API call for searching stock tickers\n        let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n        let data = await response.json();\n\n        //create temp list\n        let new_symbol_list = [];\n\n        // If API limit: alerts, maintains current results(if any)\n        // Else: updates search results display properly\n        if(data.Note){\n            alert(\"MAX API CALLS. Please wait a minute for more. However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n            // Maintains current search results\n            dispatch({\n                type: 'MAX_API',\n                payload: new_symbol_list\n            });\n        }else{\n        //iterate over all search results\n        Object.keys(data.bestMatches).forEach( (e) => {\n            //filter non-US stocks, then add\n            if(data.bestMatches[e][\"4. region\"] === \"United States\"){\n            let new_symbol = {\n                symbol: data.bestMatches[e][\"1. symbol\"],\n                name: data.bestMatches[e][\"2. name\"]\n            }\n            new_symbol_list = [new_symbol, ...new_symbol_list];\n            }\n        });\n        new_symbol_list.reverse();\n        //update state of web app (official symbol_list)\n        dispatch({\n            type: 'STOCK_SEARCH',\n            payload: new_symbol_list\n        });\n        }\n    }\n\n    // Graphs API data based on user selected stock symbol\n    async function graphSymbol(selectedSymbol, selectedCompany, graphType, doClearCache) {\n        // Clear cache for new symbol search\n        if(doClearCache){\n            state.cache_TSDA = {};\n            state.cache_TS15min = {};\n            state.cache_TS60min = {};\n        }\n\n        // Specific API call parameters\n        let function_API;\n        let outputSize;\n        let interval_API = '';\n        let cache_exists = false;\n        let data;\n        let response;\n        switch(graphType){\n            case 'day':\n                if(state.cache_TS15min['Time Series (15min)']){\n                    cache_exists = true;\n                    data = state.cache_TS15min;\n                }else{\n                    function_API = 'TIME_SERIES_INTRADAY';\n                    interval_API = '&interval=15min';\n                    outputSize = 'compact';\n                }\n                break;\n            case 'week':\n                if(state.cache_TS60min['Time Series (60min)']){\n                    cache_exists = true;\n                    data = state.cache_TS60min;\n                }else{\n                    function_API = 'TIME_SERIES_INTRADAY';\n                    interval_API = '&interval=60min';\n                    outputSize = 'compact';\n                }\n                break;\n            default:\n                if(state.cache_TSDA['Time Series (Daily)']){\n                    cache_exists = true;\n                    data = state.cache_TSDA;\n                }else{\n                    function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n                    outputSize = 'full';\n                }\n        }\n        if(!cache_exists){\n            response = await fetch(`https://www.alphavantage.co/query?function=${function_API}&symbol=${selectedSymbol}${interval_API}&outputsize=${outputSize}&apikey=CQ5JZQYM4DG0OODA`);\n            data = await response.json();\n        }\n\n\n\n        // If API limit: Alerts API limit reached, maintains current payload(stock data)\n        // Else: update current payload\n        if(data.Note){\n            alert(\"MAX API CALLS. Please wait a minute for more. However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n            dispatch({\n                type: 'MAX_API',\n                payload: [graphType,data]\n            });\n        }else if(data['Error Message']){\n            alert(\"ERROR. This stock does not have valid data in the Alpha Vantage database.\");\n            dispatch({\n                type: 'MAX_API',\n                payload: [graphType,data]\n            });\n        }else{\n            dispatch({\n                type: 'DISPLAY_GRAPHS',\n                payload: [graphType,data, selectedCompany]\n            });\n        }\n\n        // Scroll to top, makes sure user sees graph\n        window.scrollTo(0, 0)\n    }\n\n    return (<GlobalContext.Provider value={{\n        backtests: state.backtests,\n        symbol_list: state.symbol_list,\n        graphData_AV_API: state.graphData_AV_API,\n        current_symbol: state.current_symbol,\n        current_company: state.current_company,\n        cache_TSDA: state.cache_TSDA,\n        cache_TS15min: state.cache_TS15min,\n        cache_TS60min: state.cache_TS60min,\n        graph_type: state.graph_type,\n        deleteBacktest,\n        addBacktest,\n        clearSearch,\n        stockSearch,\n        graphSymbol,\n        cache_TSDA_function\n    }}>\n        {children}\n        \n    </GlobalContext.Provider>);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}