{"ast":null,"code":"var _jsxFileName = \"/Users/JohnD/Desktop/tradingview/src/components/GraphSection.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Chart from \"./chart-components/Chart\";\nimport styled from \"styled-components\";\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CSS = styled.div`\n\n  .chart-info-area{\n    margin: 0 16% 0 16%;\n    padding-top: 120px;\n  }\n\n  .stock-info{\n    display: flex;\n    align-items: center;\n    width: 110.5%;\n    margin: 2% -5%;\n    padding: 20px 50px 0px 50px;\n    color: #dedfe4;\n    background-color: transparent;//#2e4033;\n    border-radius: 10px;\n    font-family: 'Source Sans Pro', arial, sans-serif;\n    font-size: 16px;\n    font-weight: 200;\n    box-shadow: rgba(0, 0, 0, 0.4) 0px 5px 15px;\n\n    \n    @media only screen and (max-width: 768px) {\n      padding: 2%;\n      font-size: 75%;\n    }\n\n    &-ticker{\n      text-align: left;\n      float: left;\n      width: 33.33333%;\n    }\n    &-company{\n      text-align: center;\n      float: left;\n      width: 33.33333%;\n    }\n    &-updated{\n      text-align: right;\n      float:left;\n      width: 33.33333%;\n    }\n  }\n\n  .chart-buttons{\n    margin: 5px 0 0 16%;\n  }\n  .chart-button{\n    color: #dedfe4;\n    font-size: 16px;\n    padding: 5px 15px;\n    background-color: transparent;\n    margin: 0 10px;\n    border: none;\n    border-radius: 10px;\n\n    &:hover,&:focus {\n        background: #101010;\n        outline: none;\n        box-shadow: rgba(0, 0, 0, 0.4) 0px 3px 10px;\n    }\n  }\n`; // Hook for dynamic window size\n\n_c = CSS;\n\nfunction useWindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s(useWindowSize, \"WMqaMVAPr0u8CJVTsAIdEuYrbbM=\");\n\nexport const GraphSection = () => {\n  _s2();\n\n  //grab global variables/functions to call in this file\n  const {\n    graphData_AV_API,\n    graphSymbol,\n    current_symbol,\n    current_company,\n    graph_type\n  } = useContext(GlobalContext);\n  const myWindow = useWindowSize();\n  const chart_width = myWindow.width * 2 / 3;\n  const chart_height = myWindow.height * 2 / 3; // Processes update to API call and sends data to candlestick chart.\n\n  const processGraphData = () => {\n    let time_series_type;\n\n    if (graphData_AV_API['Time Series (15min)']) {\n      time_series_type = 'Time Series (15min)';\n    } else if (graphData_AV_API['Time Series (60min)']) {\n      time_series_type = 'Time Series (60min)';\n    } else {\n      //if(graphData_AV_API['Time Series (Daily)']){\n      time_series_type = 'Time Series (Daily)';\n    }\n\n    const time_series_isDaily = time_series_type === 'Time Series (Daily)' ? true : false;\n    let split_ratio = 1.0; //this arrays are sus\n\n    let graphDataProcessed = [];\n    let i = 0;\n    let date_counter = 0;\n    let previous_date = '';\n    let stop_graphing = false; // Iterate/translate API call to fit my charts inputs\n\n    for (let myDate in graphData_AV_API[time_series_type]) {\n      // Counts unique dates, stops graphing according to graph_Type\n      if (!(previous_date === myDate.substr(0, 10))) {\n        previous_date = myDate.substr(0, 10);\n        date_counter++;\n\n        switch (graph_type) {\n          case 'day':\n            if (date_counter > 1) stop_graphing = true;\n            break;\n\n          case 'week':\n            if (date_counter > 5) stop_graphing = true;\n            break;\n\n          case 'month':\n            if (date_counter > 20) stop_graphing = true;\n            break;\n\n          case 'quarter':\n            if (date_counter > 60) stop_graphing = true;\n            break;\n\n          case 'year':\n            if (date_counter > 253) stop_graphing = true;\n            break;\n\n          default:\n        }\n\n        if (stop_graphing) break;\n      } // Some API data open==close==high==low, resulting in candles of size 0x0, resulting in empty graph. \n      // flat_candle ensures candles are never 0x0 (invisible).\n\n\n      let flat_candle = +graphData_AV_API[time_series_type][myDate]['1. open'] === +graphData_AV_API[time_series_type][myDate]['4. close'] ? 0.001 : 0;\n      graphDataProcessed.push({\n        \"time\": i++,\n        \"xAxis\": myDate,\n        \"open\": (+graphData_AV_API[time_series_type][myDate]['1. open'] / split_ratio).toFixed(2),\n        \"close\": (flat_candle + graphData_AV_API[time_series_type][myDate]['4. close'] / split_ratio).toFixed(2),\n        \"high\": (+graphData_AV_API[time_series_type][myDate]['2. high'] / split_ratio).toFixed(2),\n        \"low\": (+graphData_AV_API[time_series_type][myDate]['3. low'] / split_ratio).toFixed(2),\n        \"volume\": +graphData_AV_API[time_series_type][myDate][time_series_isDaily ? '6. volume' : '5. volume']\n      });\n      if (time_series_isDaily) split_ratio *= +graphData_AV_API[time_series_type][myDate]['8. split coefficient'];\n    }\n\n    graphDataProcessed.reverse();\n    return graphDataProcessed;\n  }; // Only for intialization: maybe make it display SPY as default\n\n\n  const [data, setData] = useState(() => processGraphData()); // Whenever graphData_AV_API is changed, code below will update graph\n\n  useEffect(() => {\n    if (current_symbol.length > 0) setData(processGraphData());\n  }, [graph_type, current_symbol]); // eslint-disable-line react-hooks/exhaustive-deps\n  // Convert JS date into easy to read date\n\n  const convertDate = dateString => {\n    if (!dateString) return \"error\";\n    const myYear = dateString.substring(2, 4);\n    const myMonth = parseInt(dateString.substring(5, 7), 10);\n    const myDay = parseInt(dateString.substring(8, 10), 10);\n\n    if (dateString.length === 10) {\n      return myMonth + \"/\" + myDay + \"/\" + myYear;\n    }\n\n    const myHour = parseInt(dateString.substring(11, 13), 10);\n    const myMinute = dateString.substring(14, 16);\n    return myMonth + \"/\" + myDay + \"/\" + myYear + \" \" + myHour + \":\" + myMinute + \" EST\";\n  };\n\n  if (current_symbol.length > 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(CSS, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-info-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stock-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"stock-info-ticker\",\n              children: [\"Ticker: \", current_symbol]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"stock-info-company\",\n              children: [\"Name: \", current_company]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"stock-info-updated\",\n              children: [\"Updated: \", convertDate(graphData_AV_API[\"Meta Data\"][\"3. Last Refreshed\"])]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Chart, {\n            data: data,\n            graph_type: graph_type,\n            width: chart_width,\n            height: chart_height\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chart-button\",\n            onClick: () => graphSymbol(current_symbol, current_company, 'day', false),\n            children: \"1D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chart-button\",\n            onClick: () => graphSymbol(current_symbol, current_company, 'week', false),\n            children: \"1W\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chart-button\",\n            onClick: () => graphSymbol(current_symbol, current_company, 'month', false),\n            children: \"1M\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chart-button\",\n            onClick: () => graphSymbol(current_symbol, current_company, 'quarter', false),\n            children: \"3M\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chart-button\",\n            onClick: () => graphSymbol(current_symbol, current_company, 'year', false),\n            children: \"1Y\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_s2(GraphSection, \"uKc7rbupqqIH56454rzZwDnTlU0=\", false, function () {\n  return [useWindowSize];\n});\n\n_c2 = GraphSection;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CSS\");\n$RefreshReg$(_c2, \"GraphSection\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Chart","styled","GlobalContext","CSS","div","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","GraphSection","graphData_AV_API","graphSymbol","current_symbol","current_company","graph_type","myWindow","chart_width","chart_height","processGraphData","time_series_type","time_series_isDaily","split_ratio","graphDataProcessed","i","date_counter","previous_date","stop_graphing","myDate","substr","flat_candle","push","toFixed","reverse","data","setData","length","convertDate","dateString","myYear","substring","myMonth","parseInt","myDay","myHour","myMinute"],"sources":["/Users/JohnD/Desktop/tradingview/src/components/GraphSection.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport Chart from \"./chart-components/Chart\";\nimport styled from \"styled-components\";\n\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\n\nconst CSS = styled.div`\n\n  .chart-info-area{\n    margin: 0 16% 0 16%;\n    padding-top: 120px;\n  }\n\n  .stock-info{\n    display: flex;\n    align-items: center;\n    width: 110.5%;\n    margin: 2% -5%;\n    padding: 20px 50px 0px 50px;\n    color: #dedfe4;\n    background-color: transparent;//#2e4033;\n    border-radius: 10px;\n    font-family: 'Source Sans Pro', arial, sans-serif;\n    font-size: 16px;\n    font-weight: 200;\n    box-shadow: rgba(0, 0, 0, 0.4) 0px 5px 15px;\n\n    \n    @media only screen and (max-width: 768px) {\n      padding: 2%;\n      font-size: 75%;\n    }\n\n    &-ticker{\n      text-align: left;\n      float: left;\n      width: 33.33333%;\n    }\n    &-company{\n      text-align: center;\n      float: left;\n      width: 33.33333%;\n    }\n    &-updated{\n      text-align: right;\n      float:left;\n      width: 33.33333%;\n    }\n  }\n\n  .chart-buttons{\n    margin: 5px 0 0 16%;\n  }\n  .chart-button{\n    color: #dedfe4;\n    font-size: 16px;\n    padding: 5px 15px;\n    background-color: transparent;\n    margin: 0 10px;\n    border: none;\n    border-radius: 10px;\n\n    &:hover,&:focus {\n        background: #101010;\n        outline: none;\n        box-shadow: rgba(0, 0, 0, 0.4) 0px 3px 10px;\n    }\n  }\n`;\n\n// Hook for dynamic window size\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    \n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    \n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    \n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\nexport const GraphSection = () => {\n  //grab global variables/functions to call in this file\n  const { graphData_AV_API, graphSymbol, current_symbol, current_company, graph_type } = useContext(GlobalContext);\n\n  const myWindow = useWindowSize();\n  const chart_width = myWindow.width*2/3;\n  const chart_height = myWindow.height*2/3;\n\n  // Processes update to API call and sends data to candlestick chart.\n  const processGraphData = () => {\n    let time_series_type;\n    if(graphData_AV_API['Time Series (15min)']){\n      time_series_type = 'Time Series (15min)';\n    }else if(graphData_AV_API['Time Series (60min)']){\n      time_series_type = 'Time Series (60min)';\n    }else{//if(graphData_AV_API['Time Series (Daily)']){\n      time_series_type = 'Time Series (Daily)';\n    }\n    const time_series_isDaily = time_series_type === 'Time Series (Daily)' ? true : false;\n    let split_ratio = 1.0;\n\n    //this arrays are sus\n    let graphDataProcessed = [];\n    let i = 0\n\n    let date_counter = 0;\n    let previous_date = '';\n    let stop_graphing = false;\n    // Iterate/translate API call to fit my charts inputs\n    for(let myDate in graphData_AV_API[time_series_type]){\n      // Counts unique dates, stops graphing according to graph_Type\n      if( !(previous_date===myDate.substr(0,10)) ){\n        previous_date = myDate.substr(0,10);\n        date_counter++;\n        \n        switch(graph_type){\n            case 'day':\n                if(date_counter>1) stop_graphing = true;\n                break;\n            case 'week':\n                if(date_counter>5) stop_graphing = true;\n                break;\n            case 'month':\n                if(date_counter>20) stop_graphing = true;\n                break;\n            case 'quarter':\n                if(date_counter>60) stop_graphing = true;\n                break;\n            case 'year':\n                if(date_counter>253) stop_graphing = true;\n                break;\n            default:\n        }\n        if(stop_graphing) break;\n      }\n\n      // Some API data open==close==high==low, resulting in candles of size 0x0, resulting in empty graph. \n      // flat_candle ensures candles are never 0x0 (invisible).\n      let flat_candle = +graphData_AV_API[time_series_type][myDate]['1. open']=== +graphData_AV_API[time_series_type][myDate]['4. close'] ? 0.001 : 0;\n      \n      graphDataProcessed.push({\n        \"time\": i++,\n        \"xAxis\": myDate,\n        \"open\": (+graphData_AV_API[time_series_type][myDate]['1. open']/split_ratio).toFixed(2),\n        \"close\": (flat_candle+graphData_AV_API[time_series_type][myDate]['4. close']/split_ratio).toFixed(2),\n        \"high\": (+graphData_AV_API[time_series_type][myDate]['2. high']/split_ratio).toFixed(2),\n        \"low\": (+graphData_AV_API[time_series_type][myDate]['3. low']/split_ratio).toFixed(2),\n        \"volume\": +graphData_AV_API[time_series_type][myDate][time_series_isDaily ? '6. volume' : '5. volume']\n      });\n      if(time_series_isDaily) split_ratio *= +graphData_AV_API[time_series_type][myDate]['8. split coefficient'];\n    }\n    graphDataProcessed.reverse();\n    return graphDataProcessed;\n  };\n\n  // Only for intialization: maybe make it display SPY as default\n  const [data, setData] = useState(() => processGraphData());\n  // Whenever graphData_AV_API is changed, code below will update graph\n  useEffect(() => {\n    if(current_symbol.length>0) setData(processGraphData());\n  }, [graph_type, current_symbol]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Convert JS date into easy to read date\n  const convertDate = dateString => {\n    if(!dateString) return \"error\";\n    const myYear = dateString.substring(2,4);\n    const myMonth = parseInt(dateString.substring(5,7), 10);\n    const myDay = parseInt(dateString.substring(8,10), 10);\n    if(dateString.length===10){\n      return myMonth + \"/\" + myDay + \"/\" + myYear;\n    }\n    const myHour = parseInt(dateString.substring(11,13), 10);\n    const myMinute = dateString.substring(14,16);\n\n    return myMonth + \"/\" + myDay + \"/\" + myYear + \" \" + myHour + \":\" + myMinute + \" EST\";\n  }\n\n  if(current_symbol.length>0){\n    return (\n      <>\n      <CSS>\n        <div className=\"chart-info-area\">\n          <div className=\"stock-info\">\n            <p className=\"stock-info-ticker\">Ticker: {current_symbol}</p>\n            <p className=\"stock-info-company\">Name: {current_company}</p>\n            <p className=\"stock-info-updated\">Updated: {convertDate(graphData_AV_API[\"Meta Data\"][\"3. Last Refreshed\"])}</p>\n          </div>\n          <Chart data={data} graph_type={graph_type} width={chart_width} height={chart_height} />\n        </div>\n        <div className=\"chart-buttons\">\n          <button className=\"chart-button\" onClick={() => graphSymbol(current_symbol, current_company,'day', false)}>\n            1D\n          </button>\n          <button className=\"chart-button\" onClick={() => graphSymbol(current_symbol, current_company,'week', false)}>\n            1W\n          </button>\n          <button className=\"chart-button\" onClick={() => graphSymbol(current_symbol, current_company, 'month', false)}>\n            1M\n          </button>\n          <button className=\"chart-button\" onClick={() => graphSymbol(current_symbol, current_company, 'quarter', false)}>\n            3M\n          </button>\n          <button className=\"chart-button\" onClick={() => graphSymbol(current_symbol, current_company, 'year', false)}>\n            1Y\n          </button>\n        </div>\n      </CSS>\n      </>\n    )\n  }else{\n    return (\n      <>\n      </>\n    )\n  }\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}